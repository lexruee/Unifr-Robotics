<!DOCTYPE aesl-source>
<network>


<!--list of global events-->


<!--list of constants-->
<constant value="1500" name="MAX_PROX"/>
<constant value="400" name="MAX_SPEED"/>
<constant value="0" name="EXPLORER"/>
<constant value="1" name="LOVER"/>
<constant value="500" name="TIME_LIMIT"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node e-puck4-->
<node nodeId="1" name="e-puck4">###				
#										
#	Robotics Project [SA 12] | University of Fribourg						
# 																
# 	Author:			Alexander Rüedlinger, Christian Locher
#	Group:			Alexander Rüedlinger, Christian Locher
# 	Created:     	18.08.2012 									
# 	Last modified: 	15.10.2012
#	
#	Description:	 E-puck has two states. Explorer and lover. It switches between those states after a certain time.
#	
###

### VARIABLES ###
var timer = 0

var proxRight = 0
var proxLeft = 0
var normalizedSpeed = 0

var state = EXPLORER

### CODE LOGIC ###
leftSpeed = MAX_SPEED
rightSpeed = MAX_SPEED

# check time
sub timer
	if timer > TIME_LIMIT then
		if state == EXPLORER then
			state = LOVER
		else
			state = EXPLORER
		end
		timer = 0
	else
		timer = timer + 1
	end

# what to do if in state EXPLORER
sub explorer
	# compute weighted prox values		
	proxRight = (4*prox[0] + 2*prox[1] + prox[2])/7
	proxLeft = (4*prox[7] + 2*prox[6] + prox[5])/7

	# check which side of the e-puck is closer to an obstacle
	if proxRight > proxLeft then
		#compute normalized speed value according to IR sensor value
		call math.muldiv(normalizedSpeed, MAX_SPEED, proxRight, MAX_PROX)
	else
		# compute normalized speed value according to IR sensor value
		call math.muldiv(normalizedSpeed, MAX_SPEED, proxLeft, MAX_PROX)
		
		# invert value of normalizedSpeed
		normalizedSpeed = -normalizedSpeed
	end
	
	# adjust speed values to turn away from obstacle
	rightSpeed = MAX_SPEED + normalizedSpeed
	leftSpeed = MAX_SPEED - normalizedSpeed

# what to do if in state LOVER
sub lover
	# compute weighted prox values				
	proxRight = (prox[0] + 3*prox[1] + prox[2])/4
	proxLeft = (prox[7] + 3*prox[6] + prox[5])/4

	# check which side of the e-puck is closer to an obstacle
	if proxRight > proxLeft then
		#compute normalized speed value according to IR sensor value
		call math.muldiv(normalizedSpeed, MAX_SPEED, proxRight, MAX_PROX)
		
		# adjust speed values to turn to obstacle
	   	rightSpeed = normalizedSpeed
	   	leftSpeed = MAX_SPEED - normalizedSpeed
	else
		# compute normalized speed value according to IR sensor value
		call math.muldiv(normalizedSpeed, MAX_SPEED, proxLeft, MAX_PROX)
		
		# adjust speed values to turn to obstacle
		rightSpeed = MAX_SPEED - normalizedSpeed
		leftSpeed = normalizedSpeed
	end
	
onevent ir_sensors
	callsub timer	
	if state == EXPLORER then
		callsub explorer
	elseif state == LOVER then
		callsub lover
	end</node>


</network>
