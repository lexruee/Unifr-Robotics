<!DOCTYPE aesl-source>
<network>


<!--list of global events-->
<event size="0" name="push_info"/>
<event size="1" name="check_energy_state"/>
<event size="0" name="search_energy"/>
<event size="0" name="need_energy"/>


<!--list of constants-->
<constant value="-1" name="REVERSE_SPEED"/>
<constant value="20" name="REPETITION"/>
<constant value="1" name="COUNTER"/>
<constant value="32000" name="MAX_LOOP"/>
<constant value="9000" name="QUARTER_ROTATION"/>
<constant value="3" name="START_EPUCK"/>
<constant value="4" name="END_EPUCK"/>
<constant value="400" name="NORM_SPEED"/>
<constant value="0" name="NULL_SPEED"/>
<constant value="8" name="LIMIT"/>
<constant value="31000" name="FORWARD"/>
<constant value="20000" name="CHECK_INTERVAL"/>
<constant value="8" name="GREEDY"/>
<constant value="4" name="HUNGRY"/>
<constant value="20" name="ENERGY_LEVEL"/>
<constant value="8" name="MIN_ENERGY"/>
<constant value="0" name="ZERO"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node e-puck 2-->
<node nodeId="2" name="e-puck 2">###		
#													
#	Robotics Project [SA 13] | University of Fribourg							
# 															
# 	Author:			Jan Kuehni         							
# 	Created:     	22.10.2011 									
# 	Last modified: 	06.10.2013									
#	
#	Description:	epuck navigates to the feeders in order to charge up and load energy into the pool. See below for more details.	
#	
###

### VARIABLE DEFINITION ###

var i
var j
var energy_to_dispatch

### SCRIPT LOGIC ###

# rotate clockwise on the spot
speed.left = NORM_SPEED
speed.right = -NORM_SPEED

# wait for epuck to complete a quarter rotation at given speed	
for i in 0:QUARTER_ROTATION do
end 

# move forward
speed.left = NORM_SPEED
speed.right = NORM_SPEED

# wait for epuck to clear distance to the enrgy feed
for i in 0:FORWARD do 
end 

# stop in front of the energy feed 
speed.left = NULL_SPEED
speed.right = NULL_SPEED

# wait while epuck reveices energy from feeder
for i in 0:3 do
	for j in 0:MAX_LOOP do
	end 
end

# read current energy amount
energy_to_dispatch = energy

# send that amount to the pool
call energy.send(energy_to_dispatch)

# send info to e-puck 1 that pool can be used
emit push_info

# receive info from other e-pucks that pool is empty
onevent need_energy
	#emit search_energy
	call energy.send(energy_to_dispatch)

</node>


<!--node e-puck 3-->
<node nodeId="3" name="e-puck 3">###				
#										
#	Robotics Project [SA 13] | University of Fribourg						
# 																
# 	Author:			Alexander Rüedlinger, Christian Locher
#	Group:			01
# 	Created:     	18.08.2012 									
# 	Last modified: 	06.10.2013
#	
#	Description:		This epuck does exactly the same thing as the 	#					epuck 4. It consumes energy from  the energy 
#					pool. It has three modes of operation:
#						- GREEDY	
#						- HUNGRY
# 						- HELP
#					If enough energy is availaible the epuck 
# 					consumes 8 ep from the pool (GREEDY).
#					If the energy pool level is below 20 ep
#					the epuck consumes 4 ep (hungry).
#					If the energy pool is empty or can't satisfy
#					the ep requests of 4 ep, the epuck sends a 
#					help message need_energy to epuck2 (HELP).
#	
###

### VARIABLE DEFINITION ###
var energyPool = 0

### SCRIPT LOGIC ###

# This event listener handles emitted events of type
# check_energy_state.
# The event contains epuck id parameter it. The epuck with the 
# corresponding id should respond to the received message.
onevent check_energy_state
	# filter messages with incorrect epuck id and
	# respond only to messagse with correct id.
	if args[0]==id then
		call energy.amount(energyPool) #store the amount
		if  energy &lt; MIN_ENERGY then #is below min energy
			# if so then try to get some energy
			if energyPool > ENERGY_LEVEL then #be greedy
				call energy.receive(GREEDY)
			elseif energyPool >= HUNGRY then #be normal
				call energy.receive(HUNGRY)
			end
			if energyPool==ZERO then #help!
				emit need_energy
			end
		end
	end
					
# This event listener handles emmited events of type search_energy.
# The epuck should search for energy if this message is received.
onevent search_energy
	#HOW:
	# Each epuck could search for a green pillar in his neighbourhood 	# by using the installed color sensors.
	# If one epuck has found a green pillar it could send a message 		# containing the location of the energy source to the other 			# epucks. The idea is a kind of distributed search where each
	# epuck searches in his area.
	emit push_info</node>


<!--node e-puck 4-->
<node nodeId="4" name="e-puck 4">###				
#										
#	Robotics Project [SA 12] | University of Fribourg						
# 																
# 	Author:			Alexander Rüedlinger, Christian Locher
#	Group:			01
# 	Created:     	18.08.2012 									
# 	Last modified: 	06.10.2013
#	
#	Description:		This epuck does exactly the same thing as the 	#					epuck 3. It consumes energy from  the energy 
#					pool. It has three modes of operation:
#						- GREEDY	
#						- HUNGRY
# 						- HELP
#					If enough energy is availaible the epuck 
# 					consumes 8 ep from the pool (GREEDY).
#					If the energy pool level is below 20 ep
#					the epuck consumes 4 ep (hungry).
#					If the energy pool is empty or can't satisfy
#					the ep requests of 4 ep, the epuck sends a 
#					help message need_energy to epuck2 (HELP).
#	
###

### VARIABLE DEFINITION ###
var energyPool = 0

### SCRIPT LOGIC ###

# This event listener handles emitted events of type
# check_energy_state.
# The event contains epuck id parameter it. The epuck with the 
# corresponding id should respond to the received message.
onevent check_energy_state
	# filter messages with incorrect epuck id and
	# respond only to messagse with correct id.
	if args[0]==id then
		call energy.amount(energyPool) #store the amount
		if  energy &lt; MIN_ENERGY then #is below min energy
			# if so then try to get some energy
			if energyPool > ENERGY_LEVEL then #be greedy
				call energy.receive(GREEDY)
			elseif energyPool >= HUNGRY then #be normal
				call energy.receive(HUNGRY)
			end
			if energyPool==ZERO then #help!
				emit need_energy
			end
		end
	end
					

# This event listener handles emmited events of type search_energy.
# The epuck should search for energy if this message is received.
onevent search_energy
	#HOW:
	# Each epuck could search for a green pillar in his neighbourhood 	# by using the installed color sensors.
	# If one epuck has found a green pillar it could send a message 		# containing the location of the energy source to the other 			# epucks. The idea is a kind of distributed search where each
	# epuck searches in his area.
	emit push_info</node>


<!--node e-puck 1-->
<node nodeId="1" name="e-puck 1">###		
#													
#	Robotics Project [SA 13] | University of Fribourg							
# 																
# 	Author:			Jan Kuehni         							
# 	Created:     	22.10.2011 									
# 	Last modified: 	06.10.2013									
#	
#	Description:	As soon as the event push_info is recorded the Epuck periodically asks epucks 3 and 4 to perform an energy check		
#	
###
 
### VARIABLE DEFINITION ###

var i
var j
var k

### SCRIPT LOGIC ###

# receive info that energy is pushed to pool
onevent push_info
	for i in 0:REPETITION do 
		# aks epucks 3 and 4, turn by turn to perform an energy check
		for j in START_EPUCK:END_EPUCK do
			emit check_energy_state j
			for k in 0:CHECK_INTERVAL do
				# wait loop
			end 
		end
	end


	
	
	</node>


</network>
